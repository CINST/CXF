<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util  
     http://www.springframework.org/schema/util/spring-util-4.0.xsd 
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
      http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd  
	 http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">

     <!--  在 Spring 配置文件中导入 CXF 提供 XML（cxf.jar 包里提供） -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

	<bean id="inMessageInterceptor" class="org.apache.cxf.interceptor.LoggingInInterceptor" />  
    <bean id="outMessageInterceptor" class="org.apache.cxf.interceptor.LoggingOutInterceptor"/>  
      
    <bean id="helloInInterceptor" class="ts.interceptor.HelloInInterceptor">
          <property name="userInfoDao" ref="userInfoDao"></property>  
	</bean>
	
    <bean id="helloWorldImpl" class="ts.interceptor.HelloWorldImpl"/>  
      
    
     <!--id:名称(随意配)，implementor:指定接口具体实现类，address:随意配-->  
    <jaxws:endpoint id="helloWorld"  implementor="#helloWorldImpl" address="/HelloWorld"  >  
        <!-- 输入日志拦截器 -->  
       <jaxws:inInterceptors>  
          <ref bean="inMessageInterceptor"/>  
          <ref bean="helloInInterceptor"/>  
       </jaxws:inInterceptors>  
       <!-- 输出日志拦截器 -->  
       <jaxws:outInterceptors>  
          <ref bean="outMessageInterceptor"/>  
       </jaxws:outInterceptors>  
       <jaxws:properties>  
          <entry key="mtom_enabled" value="true"></entry>  
       </jaxws:properties>  
          
   </jaxws:endpoint>  
	
	
	
	<!-- SessionFactory在Hibernate中实际起到了一个缓冲区的作用，它缓冲了Hibernate自动生成的SQL语句
	               和一些其它的映射数据，还缓冲了一些将来有可能重复利用的数据。 -->
	               
	<!-- 配置Hibernate的SessionFactory，通过spring提供的 LocalSessionFactoryBean配置-->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:ExTrace.cfg.xml">
		</property>
		
		<!-- 此处配置hibernate的基本信息：数据库方言、SQL显示及格式化 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>  <!-- 在控制台打印SQL语句 -->
				<prop key="hibernate.format_sql">true</prop> 
				<!--prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop -->
			</props>
		</property>

		<property name="packagesToScan">	 <!-- 自动扫描实体对象 -->
			<list>
				<value>ts.model</value>
				<value>ts.dao</value>
				<value>ts.daoImpl</value>
			</list>
		</property>
	</bean>

	<!-- 配置事务管理器 ，事务即对数据库进行的操作-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- 向每个Dao中依赖注入sessionFactory 
	     在dao里面应该是写对数据的操作,即增删改查。既然是这样的话，你要得到session，那你得从SessionFactory里面
	     得到，所以得将SessionFactory注入-->
	<bean id="userInfoDao" class="ts.daoImpl.UserInfoDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="regionDao" ref="regionDao"></property>
	</bean>
	<bean id="transNodeDao" class="ts.daoImpl.TransNodeDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="regionDao" class="ts.daoImpl.RegionDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="commentInfoDao" class="ts.daoImpl.CommentInfoDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="customerInfoDao" class="ts.daoImpl.CustomerInfoDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="regionDao" ref="regionDao"></property>
	</bean>
	<bean id="adminInfoDao" class="ts.daoImpl.AdminInfoDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="expressSheetDao" class="ts.daoImpl.ExpressSheetDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="regionDao" ref="regionDao"></property>
	</bean>
	<bean id="transPackageDao" class="ts.daoImpl.TransPackageDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="regionDao" ref="regionDao"></property>
	</bean>
	<bean id="transHistoryDao" class="ts.daoImpl.TransHistoryDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="transPackageContentDao" class="ts.daoImpl.TransPackageContentDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="userPositionDao" class="ts.daoImpl.UserPositionDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="packageRouteDao" class="ts.daoImpl.PackageRouteDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="expressRouteDao" class="ts.daoImpl.ExpressRouteDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="twoPackageDao" class="ts.daoImpl.TwoPackageDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="nodePackagePairDao" class="ts.daoImpl.NodePackagePairDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="expressHistoryDao" class="ts.daoImpl.ExpressHistoryDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	
	<!-- REST服务的注解例子 -->
	<!-- 
                              发布服务
                              使用jaxws:server和jaxws:endpoint可以发布服务
          WebService地址=Tomcat地址值+CXF Servlet的路径+ /REST 
    -->
	<jaxrs:server id="Service" address="/REST">
	    
	     <jaxrs:inInterceptors>  
           <ref bean="inMessageInterceptor"/>  
           <ref bean="helloInInterceptor"/>
         </jaxrs:inInterceptors>  
        <jaxrs:outInterceptors>  
            <ref bean="outMessageInterceptor"/>  
        </jaxrs:outInterceptors> 
	    
		<jaxrs:serviceBeans>
			<bean class="ts.serviceImpl.MiscService">
			    <!-- 配置MiscService中的属性dao，依赖注入 -->
				<property name="transNodeDao" ref="transNodeDao"></property>	<!-- 配置MiscService中的属性dao -->
				<property name="regionDao" ref="regionDao"></property>
				<property name="customerInfoDao" ref="customerInfoDao"></property>
			</bean>
			<bean class="ts.serviceImpl.DomainService">
			     <!-- 配置DomainService中的属性dao -->
				<property name="expressSheetDao" ref="expressSheetDao"></property>	<!-- 配置DomainService中的属性dao -->
				<property name="transPackageDao" ref="transPackageDao"></property>
				<property name="transHistoryDao" ref="transHistoryDao"></property>
				<property name="transPackageContentDao" ref="transPackageContentDao"></property>
				<property name="userPositionDao" ref="userPositionDao"></property>
				<property name="userInfoDao" ref="userInfoDao"></property>
				<property name="packageRouteDao" ref="packageRouteDao"></property>
				<property name="expressRouteDao" ref="expressRouteDao"></property>
				<property name="customerInfoDao" ref="customerInfoDao"></property>
				<property name="adminInfoDao" ref="adminInfoDao"></property>
				<property name="twoPackageDao" ref="twoPackageDao"></property>
				<property name="nodePackagePairDao" ref="nodePackagePairDao"></property>
				<property name="expressHistoryDao" ref="expressHistoryDao"></property>
				<property name="transNodeDao" ref="transNodeDao"></property>
				<property name="regionDao" ref="regionDao"></property>
				<property name="commentInfoDao" ref="commentInfoDao"></property>
			</bean>
		</jaxrs:serviceBeans>

		<!--支持的格式-->
		<jaxrs:extensionMappings>
			<entry key="json" value="application/json" />
			<entry key="xml" value="application/xml" />
		</jaxrs:extensionMappings>

		<!-- 返回对象时自动转换为JSON -->
		<jaxrs:providers>
			<ref bean="jsonProvider" />
			<bean class="ts.serviceException.InvokeFaultExceptionMapper" />
		</jaxrs:providers>
		<!-- 编码格式 -->
		<jaxrs:languageMappings>
			<entry key="en" value="en-gb" />
		</jaxrs:languageMappings>
	</jaxrs:server>

	<!-- JsonProvider的属性说明: 1. dropRootElement 默认为false，则Json格式会将类名作为第一个节点，如{Customer:{"id":123,"name":"John"}}，如果配置为true，则Json格式为{"id":123,"name":"John"}，而Gson等Json包会解析格式为后者。 
		2. dropCollectionWrapperElement属性默认为false，则当遇到Collection时，Json会在集合中将容器中类名作为一个节点，比如{"Customer":{{"id":123,"name":"John"}}}，而设置为false，则JSon格式为{{"id":123,"name":"John"}} 
		3. serializeAsArray属性默认为false，则当遇到Collecion时，格式为{{"id":123,"name":"John"}}，如果设置为true，则格式为[{"id":123,"name":"john"}]，而Gson等解析为后者。 -->
	<util:list id="jsonKeys">
		<value>app</value>
		<value>comment</value>
	</util:list>

	<util:list id="jsonTypes">
		<value>application/json</value>
		<value>application/jettison</value>
	</util:list>
	<!-- 配置json的格式 -->
	<bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
		<!-- <property name="dropRootElement" value="true" /> <property name="dropCollectionWrapperElement" 
			value="true" /> <property name="serializeAsArray" value="true" /> -->
		<property name="serializeAsArray" value="true" />
		<property name="arrayKeys" ref="jsonKeys" />
		<property name="produceMediaTypes" ref="jsonTypes" />
		<property name="consumeMediaTypes" ref="jsonTypes" />
		<property name="ignoreNamespaces" value="true" />
		<property name="dropRootElement" value="true" />
		<property name="dropCollectionWrapperElement" value="true" />
		<property name="ignoreMixedContent" value="true" />
		<property name="supportUnwrapped" value="true" />
		<property name="attributesToElements" value="true" />
	</bean>

</beans>
